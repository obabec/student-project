Todo:
1) Library controllers
 - create adding books to libray
 - create listing of owned books
 - create removing books from library
 - update deleting so it also deletes all ownerships

2) Book controllers
 - create adding to libraries
 - create removing from libraries
 - create listing of libraries that own books
 - update w/ author things?

spring.datasource.url=${SPRING_DATASOURCE_URL}
spring.datasource.username=${SPRING_DATASOURCE_USERNAME}
spring.datasource.password=${SPRING_DATASOURCE_PASSWORD}
spring.jpa.hibernate.ddl-auto=${SPRING_JPA_HIBERNATE_DDL_AUTO}
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

  app:
    image: 'docker-spring-boot-postgres:latest'
    build:
      context: ./app
    container_name: app
    depends_on:
      - db
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres
      - SPRING_DATASOURCE_USERNAME=compose-postgres
      - SPRING_DATASOURCE_PASSWORD=compose-postgres
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    ports:
      - "8080:8080"

// Tests? Put some data into table
		Author charles = new Author("Charles", "Bukowski", 1920);
		Author mark = new Author("Mark", "Twain", 1835);
		Author frank = new Author("Frank", "Herbert", 1920);

		Book dune = new Book(9780441172719L, "Dune", 1965, "Sci-Fi");
		Book postOffice = new Book(9780061177576L, "Post Office", 1971, "Novel");

		String url = "http://localhost:8080";
		String author = "/author";
		String books = "/book";
		String postAuthorUri = "/author/add";
		String postBookUri = "/book/add";

		TestRequests testRequests = new TestRequests(url);

		testRequests.post(postAuthorUri, frank);
		testRequests.post(postAuthorUri, mark);
		testRequests.post(postAuthorUri, charles);

		testRequests.post(postBookUri, dune);
		testRequests.post(postBookUri, postOffice);

		testRequests.post(author + "/1/books", dune);
		testRequests.post(author + "/3/books", postOffice);